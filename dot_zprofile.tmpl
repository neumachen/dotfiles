# -*- mode: sh; sh-set-shell: zsh -*-
# vim: ft=zsh

source "${HOME}/.shtils"
 
{{ if eq .chezmoi.os "darwin" -}}
if [ -f "${HOME}/.gnubin_path" ]; then
  source "${HOME}/.gnubin_path"
fi
if [ -z "${BREW_PREFIX}" ]; then
  export BREW_PREFIX=$([[ "$(arch)" == "arm64" ]] && echo "/opt/homebrew" || echo "/usr/local")
  pathmunge "${BREW_PREFIX}/bin" after
  pathmunge "${BREW_PREFIX}/sbin" after
fi
{{ end -}}

# ZSH only and most performant way to check existence of an executable
# https://www.topbug.net/blog/2016/10/11/speed-test-check-the-existence-of-a-command-in-bash-and-zsh/
command_exists() { (( $+commands[$1] )); }

if [ -z "${CHEZMOI_CONFIG_DIR}" ]; then
  if command_exists chezmoi; then
    export CHEZMOI_CONFIG_DIR="${HOME}/.config/chezmoi"
    if [ -z "${DOTFILES_DIR}" ]; then
      export DOTFILES_DIR="$(chezmoi source-path)"
    fi
  fi
fi

if [ -z "$MEINE_HELFERLEIN" ]; then
  meine_helferlein_dir="${HOME}/.local/share/meine-helferlein"
  if [ ! -d "$meine_helferlein_dir" ]; then
    echo-warn "$meine_helferlein_dir dir does not exist, custom functions will fail"
  else
    export MEINE_HELFERLEIN="$meine_helferlein_dir"
    pathmunge "${MEINE_HELFERLEIN}" after
  fi
fi

# Don't write python .pyc files, because they're not necessary and clutter
# directories with binary files
export PYTHONDONTWRITEBYTECODE=1

export FZF_DEFAULT_OPTS="--multi \
  --tmux=right,40% \
  --preview-window=:hidden \
  --bind='?:toggle-preview' \
  --bind='ctrl-u:preview-page-up' \
  --bind='ctrl-d:preview-page-down' \
  --bind='ctrl-a:select-all' \
  --bind='ctrl-y:execute-silent(echo {+} | pbcopy)' \
  --highlight-line \
  --info=inline-right \
  --ansi \
  --layout=reverse \
  --border=none \
  --color=bg+:#283457 \
  --color=bg:#16161e \
  --color=border:#27a1b9 \
  --color=fg:#c0caf5 \
  --color=gutter:#16161e \
  --color=header:#ff9e64 \
  --color=hl+:#2ac3de \
  --color=hl:#2ac3de \
  --color=info:#545c7e \
  --color=marker:#ff007c \
  --color=pointer:#ff007c \
  --color=prompt:#2ac3de \
  --color=query:#c0caf5:regular \
  --color=scrollbar:#27a1b9 \
  --color=separator:#ff9e64 \
  --color=spinner:#ff007c \
"

export FZF_DEFAULT_COMMAND="${FZF_DEFAULT_COMMAND:-fd --type f --hidden --exclude .git}"
export FZF_PREVIEW_OPTS="--preview-window='right:60%:hidden:wrap' \
  --preview='([[ -d {} ]] && tree -C {}) || ([[ -f {} ]] && bat --style=full --color=always {}) || echo {}' \
"
export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS \
  $FZF_PREVIEW_OPTS
"
export FORGIT_STASH_FZF_OPTS="--bind='ctrl-d:reload(git stash drop $(cut -d: -f1 <<<{}) 1>/dev/null && git stash list)'"
export FORGIT_LOG_FZF_OPTS="--bind='ctrl-e:execute(echo {} |grep -Eo [a-f0-9]+ |head -1 |xargs git show |vim -)'"

export RIPGREP_CONFIG_PATH="${HOME}/.config/rg/.ripgreprc"

# this should only be used when gpg was installed using brew
# https://stackoverflow.com/questions/39494631/gpg-failed-to-sign-the-data-fatal-failed-to-write-commit-object-git-2-10-0
export GPG_TTY=$(command tty)
 
local_bin="${HOME}/.local/bin"
if [[ ! -d "${local_bin}" ]]; then
  echo-info "local bin directory not found, creating"
  mkdir -p "${local_bin}"
fi
export LOCAL_BIN="${local_bin}"

local_sbin="${HOME}/.local/sbin"
if [ ! -d "${local_sbin}" ]; then
  echo-info "local sbin directory not found, creating"
  mkdir -p "${local_sbin}"
fi
export LOCAL_SBIN="${local_sbin}"

fzf_bin="${HOME}/.local/share/fzf/bin"
if [[ ! -d "${fzf_bin}" ]]; then
  echo-warn "${fzf_bin} not found"
else
  export LOCAL_BIN="${LOCAL_BIN}:${fzf_bin}"
fi
pathmunge "${LOCAL_BIN}" after
pathmunge "${LOCAL_SBIN}" after

{{- if (hasKey . "envvars") }}
 {{ range .envvars }}
export {{ . }}
 {{- end -}}
