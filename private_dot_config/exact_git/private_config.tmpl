# vim:ft=gitconfig
[ghq]
  root = {{ expandenv "${CODEBASIS_DIR}" }}
  vcs = git
[include]
  path = {{ expandenv "${HOME}/.config/git/default_profile" }}

[status]
  submoduleSummary = true

[commit]
  template = {{ expandenv "${HOME}/.config/git/templates/message"}}

[color]
  ui = auto
  status = auto
  diff = auto
  branch = auto
  showBranch = auto
  interactive = auto

[core]
  editor = "nvim"
  excludesfile = {{ expandenv "${HOME}/.config/git/ignore"}}
  pager = delta
  autocrlf = input

  # Make `git rebase` safer on macOS.
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

[format]
  pretty = format:%C(yellow)%h %Cblue%>(15)%ad %Cgreen%<(15)%aN%Cred%d %Creset%s

[alias]
  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  # via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=5 --sort=-committerdate refs/heads/ --format='%(refname:short)'
  
  # log
  l = log --graph --date=iso
  # View abbreviated SHA, description, and history graph of the latest 20 commits.
  lp = log --pretty=oneline -n 20 --graph --abbrev-commit
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  changelog = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

  # View the current working tree status using the short format.
  s = status -s

  # Show the diff between the latest commit and the current state.
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules.
  pl = pull --recurse-submodules

  # push
  ps = push

  # rebase
  rc = rebase --continue
  rs = rebase --skip

  # remote
  r = remote -v

  c = commit                        # commit using editor
  cam = commit -am                  # commit all with message
  call = !git add -A && git commit -av
  ci = commit                       # commit
  amend = commit --amend            # ammend your last commit
  nemend = commit --amend --no-edit
  # checkout
  cco = checkout                     # checkout
  # Switch to a branch, creating it if necessary.
  br = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout -t -b \"$1\"; }; f"
  # create and switch to a new branch (mnemonic: "git new branch branchname...")
  nb = checkout -t -b

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch --all
  remotes = remote --verbose

  fix='$EDITOR `git diff --name-only | uniq`'

  # List all aliases.  Stolen from here: https://twitter.com/TrevorBramble/status/774292970681937920
  aliases = "!git config -l | grep ^alias | cut -c 7- | sort"

  fall = fetch --all

  # Destroy all local changes and reset to HEAD.
  hreset = reset --hard HEAD

  # Reset previous commit, but keep all the associated changes. Useful for avoiding nasty git merge commits.
  uncommit = reset --soft HEAD^

  reset-up = reset --hard $(git upstream)

  # list untracked files
  lsu = ls-files --others --exclude-standard

  # Remove branches that have already been merged with main.
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Show the user email for the current repository.
  whoami = config user.email
[branch]
  # Show most recently changed branches first.
  sort = -committerdate

[diff]
  colorMoved = default
  navigate = true  # use n and N to move between diff sections
  renames = copies # Detect copies as well as renames.

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  command = "nvim"
  args = ["-d", "{{ `{{ .Source }}` }}", "{{ `{{ .Destination }}` }}", "{{ `{{ .Target }}` }}"]
  conflictstyle = diff3

[delta]
  line-numbers-minus-style      = "#914c54"
  line-numbers-plus-style       = "#449dab"
  line-numbers-zero-style       = "#3b4261"
  minus-emph-style              = syntax "#763842"
  minus-empty-line-marker-style = syntax "#3f2d3d"
  minus-non-emph-style          = syntax "#3f2d3d"
  minus-style                   = syntax "#3f2d3d"
  plus-emph-style               = syntax "#316172"
  plus-empty-line-marker-style  = syntax "#283b4d"
  plus-non-emph-style           = syntax "#283b4d"
  plus-style                    = syntax "#283b4d"

  line-numbers = true
  navigate     = true
  side-by-side = true

[interactive]
  diffFilter = delta --color-only

[push]
  default = current
  followTags = true

[pull]
  default = current
  rebase = true

[rebase]
  autoStash = true

[fetch]
  prune = true

[gitsh]
  prompt = "\n%D %c(%b%#)%w ➜"

[rerere]
  enabled = false

[help]
  # Automatically correct and execute mistyped commands.
  autocorrect = 1

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  insteadOf = "https://github.com/"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
  insteadOf = "github:"

[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
  insteadOf = "gist:"

[filter "lfs"]
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process

[init]
  defaultBranch = main
