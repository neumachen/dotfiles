# -*- mode: sh; sh-set-shell: zsh -*-
# vim: ft=zsh

# Profiling Start
# zmodload zsh/zprof

source "${HOME}/.shtils"

pathmunge ${MEINE_HELFERLEIN} before

# Initialize Zim if it's not already installed
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  echo-info "Downloading zimfw" \
    && curl -fsSL --create-dirs -o "${ZIM_HOME}/zimfw.zsh" \
       https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh \
    || echo-err "Unable to download zimfw"
fi

# Initialize Zim
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZIM_CONFIG_FILE} ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi

source ${ZIM_HOME}/init.zsh

# Install missing modules
# Configure history-substring-search keybindings
zmodload zsh/terminfo
[ -n "${terminfo[kcuu1]}" ] && bindkey "${terminfo[kcuu1]}" history-substring-search-up
[ -n "${terminfo[kcud1]}" ] && bindkey "${terminfo[kcud1]}" history-substring-search-down
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# setopts
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_all_dups   # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution
setopt share_history          # share command history data
setopt always_to_end          # cursor moved to the end in full completion
setopt hash_list_all          # hash everything before completion
setopt completealiases        # complete alisases
setopt always_to_end          # when completing from the middle of a word, move the cursor to the end of the word
setopt complete_in_word       # allow completion from within a word/phrase
setopt nocorrect              # spelling correction for commands
setopt list_ambiguous         # complete as much of a completion until it gets ambiguous.
setopt nolisttypes
setopt listpacked
setopt automenu
setopt autocd                 # no need ot put CD when traversing directories
unsetopt BEEP

alias c='clear'

if command_exists task; then
  taskwarrior_data_dir="${HOME}/.local/share/task"
  if [ -d "${HOME}/Documents/taskwarrior" ]; then
    taskwarrior_data_dir="${HOME}/Documents/taskwarrior"
  fi

  export TASKWARRIOR_DATA="${taskwarrior_data_dir}"
  export TASKRC="${HOME}/.config/taskwarrior/taskrc"

  if command_exists taskwarrior-tui; then
    alias taskui="taskwarrior-tui"
  fi
fi

if command_exists bat; then
  unalias -m 'cat'
  alias cat='bat -pp'
fi

if ! command_exists sudoedit; then
  alias sudoedit='sudo --edit'
fi

if command_exists shfmt; then
  alias my-shfmt="shfmt -i 2 -w -ci"
fi

if command_exists docker; then
  if docker compose >/dev/null 2>&1; then
    alias dcomp="docker compose"
  else
    if command_exists docker-compose >/dev/null 2>&1; then
      alias dcomp="docker-compose"
    fi
  fi
fi

if command_exists nvim; then
  unalias -m 'vim'
  alias vim='nvim'
fi

HISTFILE="${HOME}/.local/share/zsh/history"

# make some commands not show up in history
HISTIGNORE="ls:ll:la:cd:cd -:pwd:exit:date:* --help"
HISTSIZE=10000000
SAVEHIST=10000000

function source-env() {
  if [ $# -eq 0 ]; then
    echo "${usage}"
    exit 1
  fi

  for file in "$@"
  do
    if [ ! -f "${file}" ]; then
      echo-err "the given file : ${file} does not exist"
      exit 1
    fi

    source <(cat "${file}" | sed -n -e '/^#/d;/^\s*$/d' \
      -e "s/'/'\\\''/g" \
      -e "s/=\(.*\)/='\1'/g" \
      -e 's/.*/export &/p')
  done
}

function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

function reload-shell() {
  exec zsh -il
}

# Profiling End
# zprof
