# -*- mode: sh; sh-set-shell: zsh -*-
# vim: ft=zsh

# Profiling Start
# zmodload zsh/zprof

source "${HOME}/.shtils"

# ZSH only and most performant way to check existence of an executable
# https://www.topbug.net/blog/2016/10/11/speed-test-check-the-existence-of-a-command-in-bash-and-zsh/
command_exists() { (( $+commands[$1] )); }

# Initialize Zim if it's not already installed
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  echo-info "Downloading zimfw" \
    && curl -fsSL --create-dirs -o "${ZIM_HOME}/zimfw.zsh" \
       https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh \
    || echo-err "Unable to download zimfw"
fi

# Initialize Zim
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZIM_CONFIG_FILE} ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi

source ${ZIM_HOME}/init.zsh

fzf_key_bindings_path="${HOME}/.local/share/fzf/shell/key-bindings.zsh"
if [[ -f "$fzf_key_bindings_path" ]]; then
    source "$fzf_key_bindings_path"
else
  echo-warn "fzf keybindings file: $fzf_key_bindings_path not found"
fi
# Don't write python .pyc files, because they're not necessary and clutter
# directories with binary files
export PYTHONDONTWRITEBYTECODE=1

export FORGIT_STASH_FZF_OPTS="--bind='ctrl-d:reload(git stash drop $(cut -d: -f1 <<<{}) 1>/dev/null && git stash list)'"
export FORGIT_LOG_FZF_OPTS="--bind='ctrl-e:execute(echo {} |grep -Eo [a-f0-9]+ |head -1 |xargs git show |vim -)'"

export RIPGREP_CONFIG_PATH="${HOME}/.config/rg/.ripgreprc"

# Install missing modules
# Configure history-substring-search keybindings
zmodload zsh/terminfo
[ -n "${terminfo[kcuu1]}" ] && bindkey "${terminfo[kcuu1]}" history-substring-search-up
[ -n "${terminfo[kcud1]}" ] && bindkey "${terminfo[kcud1]}" history-substring-search-down
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

#############################
# Shell Options
#############################

# History
#
# Append history to the history file (no overwriting)
setopt appendhistory
# Share history across terminals
setopt sharehistory
# Immediately append to the history file, not just when a term is killed
setopt incappendhistory
# Remove superfluous blanks from each command line being added to the history list
setopt histreduceblanks
# Remove command lines from the history list when the first character on the
# line is a space, or when one of the expanded aliases contains a leading space
setopt histignorespace
# Do not enter command lines into the history list if they are duplicates of the
# previous event.
setopt histignorealldups
# Delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt histexpiredupsfirst
# show command with history expansion to user before running it
setopt histverify
# Add a bit more data (timestamp in unix epoch time and elapsed time of the command)
setopt extendedhistory

# Directory
#
# Switching directories for lazy people
setopt autocd
# See: http://zsh.sourceforge.net/Intro/intro_6.html
setopt autopushd pushdminus pushdsilent pushdtohome pushdignoredups
# Don't kill background jobs when I logout
setopt nohup

# Input/Output
#
# Automatically use menu completion after the second consecutive request for
# completion, for example by pressing the tab key repeatedly.
setopt automenu
# If the argument to a cd command (or an implied cd with the AUTO_CD option set)
# is not a directory, and does not begin with a slash, try to expand the
# expression as if it were preceded by a '~'
setopt cdablevars
# Try to make the completion list smaller (occupying less lines) by printing
# the matches in columns with different widths
setopt listpacked
# Don't show types in completion lists
setopt nolisttypes
# Complete as much of a completion until it gets ambiguous.
setopt listambiguous
# Whenever a command completion is attempted, make sure the entire command path
# is hashed first. This makes the first completion slower.
setopt hashlistall          # hash everything before completion
# If a completion is performed with the cursor within a word, and a full
# completion is inserted, the cursor is moved to the end of the word
setopt alwaystoend
# Not correct the spelling of commands
setopt nocorrect nocorrectall
# Disable beep
setopt nobeep
# Allow comments inside commands
setopt interactivecomments
# Report the status of background jobs immediately, rather than waiting until
# just before printing a prompt.
setopt notify
# Display PID when using jobs
setopt longlistjobs
# Perform implicit tees or cats when multiple redirections are attempted
setopt multios
# Use vi key bindings in ZSH
# NOTE: disabled, handled by zsh-vi-mode with zimfw
# setopt vi
# complete alisases
setopt completealiases

alias c='clear'

if command_exists task; then
  taskwarrior_data_dir="${HOME}/.local/share/task"
  if [ -d "${HOME}/Documents/taskwarrior" ]; then
    taskwarrior_data_dir="${HOME}/Documents/taskwarrior"
    export TASKWARRIOR_DATA="${taskwarrior_data_dir}"
    export TASKRC="${HOME}/.config/taskwarrior/taskrc"

    if command_exists taskwarrior-tui; then
      alias taskui="taskwarrior-tui"
    fi
  fi
fi

if command_exists bat; then
  unalias -m 'cat'
  alias cat='bat -pp'
fi

if ! command_exists sudoedit; then
  alias sudoedit='sudo --edit'
fi

if command_exists shfmt; then
  alias my-shfmt="shfmt -i 2 -w -ci"
fi

if command_exists docker; then
  if docker compose >/dev/null 2>&1; then
    alias dcomp="docker compose"
  else
    if command_exists docker-compose >/dev/null 2>&1; then
      alias dcomp="docker-compose"
    fi
  fi
fi

if command_exists nvim; then
  unalias -m 'vim'
  alias vim='nvim'
fi

HISTFILE="${HOME}/.local/share/zsh/history"
# Ensure the directory for HISTFILE exists
histfile_dir="$(dirname "${HISTFILE}")"
if [[ ! -d "${histfile_dir}" ]]; then
  mkdir -p "${histfile_dir}"
fi

# make some commands not show up in history
HISTIGNORE="ls:ll:la:cd:cd -:pwd:exit:date:* --help"
HISTSIZE=10000000
SAVEHIST=10000000

function source-env() {
  if [ $# -eq 0 ]; then
    echo "${usage}"
    exit 1
  fi

  for file in "$@"
  do
    if [ ! -f "${file}" ]; then
      echo-err "the given file : ${file} does not exist"
      exit 1
    fi

    source <(cat "${file}" | sed -n -e '/^#/d;/^\s*$/d' \
      -e "s/'/'\\\''/g" \
      -e "s/=\(.*\)/='\1'/g" \
      -e 's/.*/export &/p')
  done
}

function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

function reload-shell() {
  exec zsh -il
}

# Profiling End
# zprof
